@typeparam TItem

<ul class="@(isRoot ? "tree": "")">
    @foreach (var item in Items)
    {
        <li>
            <div class="d-flex align-items-center mb-2 tree-container" style="padding-left:@(Level*20)px">

                @if (HasChildren(item))
                {
                    <Icon Elements="@(Root.IsExpanded(item) ? InternalIcons.Circle_minus : InternalIcons.Circle_plus)" OnClick="@(() => Root.ToogleExpanded(item))" class="icon me-2 cursor-pointer tree-node-expand-icon" />
                }
                else
                {
                    <Icon class="icon me-2" />
                }

                <div @onclick="@(() => Root.ToogleSelected(item))" class="cursor-pointer @(Root.IsSelected(item) ? "tree-node-selected": "")">
                    @Template(item)
                </div>
            </div>


            @if (HasChildren(item) && Root.IsExpanded(item))
            {
                <TabBlazor.Components.TreeViews.TreeViewNodes Items="ChildSelector(item)"
                                                              Template="Template"
                                                              ChildSelector="ChildSelector"
                                                              Level="@(Level+1)" />
            }
        </li>

    }
</ul>

