@page "/categorias"
@using CucoStore.Docs.Components.Modals
@using CucoStore.Docs.Interfaces
@using CucoStore.Docs.Models
@using CucoStore.Docs.ViewModels
@using Category = CucoStore.Docs.Models.Category

@inject CategoriesPageViewModel Model


<Table Item="Category" Items="Model.Categories" PageSize="10"
       OnItemSelected="OnItemDelete">
    <HeaderTemplate>
        <strong>Proveedores</strong>
    </HeaderTemplate>

    <ChildContent>
        <Column Item="Category" Property="e=>e.Description" Title="Nombre" Sortable Searchable Groupable />
        <Column Item="Category" Property="e => e.Id" Title="Imagen">
            <Template>
                <img src="@context.Picture" style="height: 100px;" />
            </Template>
        </Column>
    </ChildContent>

</Table>
<Button @onclick=@ShowModal BackgroundColor="TablerColor.Green">
    <Icon class="icon" Elements="@DemoIcons.Circle_plus" />
    Registrar
</Button>
@code {

    [Inject] IModalService ModalService { get; set; }
    [Inject] TabBlazor.Services.TablerService TablerService { get; set; }
    [Inject] NavigationManager NavManager { get; set; }
    protected override void OnAfterRender(bool firstrender)
    {
        @if (CucoStore.Docs.Data.AppData.Current.User.Id <= 0)
        {
            NavManager.NavigateTo("login");
        }
    }
    protected async Task ShowModal()
    {


        var component = new RenderComponent<CategoryAdd>();
        var result = await ModalService.ShowAsync("Alta de categoria", component, new ModalOptions { Size = ModalSize.Small });

        if (!result.Cancelled)
        {
            await Model.Refresh();
            StateHasChanged();
        }


    }

    protected override async Task OnInitializedAsync()
    {
        await Model.Refresh();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Model.Refreshed += Refreshed;
    }

    private void Refreshed(object sender, EventArgs e)
    {
        (sender as IRefresh).Refreshed -= Refreshed;
        StateHasChanged();
    }

    private async Task OnItemDelete(Category Category)
    {
        var component = new RenderComponent<CategoryAdd>().Set(prove => prove.CategoryId, Category.Id);
        var result = await ModalService.ShowAsync("Editar categoría", component, new ModalOptions { Size = ModalSize.Large });
        if (!result.Cancelled)
        {
            await Model.Refresh();
            StateHasChanged();
        }
    }

}
