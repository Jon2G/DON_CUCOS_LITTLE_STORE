@using Microsoft.AspNetCore.Components
@using CucoStore.Docs.Components.Icons
@using CucoStore.Docs.Interfaces
@using CucoStore.Docs.Models
@using CucoStore.Docs.ViewModels
<div class="row">
    <div class="col-lg-8">
        <div class="mb-3">
            <div class="row">
                <div class="col-lg-6">
                    <div class="mb-3">
                        <label class="form-label">Código de producto*:</label>
                        <div style="display: flex">
                            <input type="text" class="form-control" style="margin-right: 5px;" @bind="Model.Product.Code">
                            <Button BackgroundColor="TablerColor.Info" OnClick="FindProduct">
                                <Icon class="icon" Elements="@DemoIcons.Search" />
                            </Button>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="mb-3">
                        <label class="form-label">Nombre*:</label>
                        <input type="text" class="form-control" @bind="Model.Product.Name" />
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="mb-3">
                        <label class="form-label">Precio*:</label>
                        <input type="text" class="form-control" @bind="Model.Product.Price">
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="mb-3">
                        <label class="form-label">Descuento*:</label>
                        <input type="text" class="form-control" @bind="Model.Product.Disccount">
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="mb-3">
                        <label class="form-label">Unidad*:</label>
                        <input type="text" class="form-control" @bind="Model.Product.Unit">
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="mb-3">
                        <label class="form-label">Proveedor*:</label>

                        <div style="display: flex">

                            <Select Items="Model.Suppliers" @bind-SelectedValue="@Model.Product.Supplier"
                                    TextExpression="e=> e.Name" ValueExpression="e=>e" Clearable />

                            <Button BackgroundColor="TablerColor.Green" OnClick="AddSupplier">
                                <Icon class="icon" Elements="@InternalIcons.Circle_plus" />
                            </Button>
                        </div>

                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="mb-3">
                        <label class="form-label">Existencia inicial*:</label>
                        <input type="text" class="form-control" @bind="Model.Product.Stock">
                    </div>
                </div>


            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <div class="mb-3">
            <label class="form-label">Imagen*:</label>
            <div class="card" style="margin: 5px;">
                <img src="@Model.Product.Picture" alt="@Model.Product.Name" style="height: 200px;">
                <InputFile OnChange="OnInputFileChange" multiple />
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="row">
        <div class="col-lg-4">
            <div class="mb-3">
                <label class="form-label">Mínimo*:</label>
                <input type="text" class="form-control" @bind="Model.Product.Minimum">
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                <label class="form-label">Máximo*:</label>
                <input type="text" class="form-control" @bind="Model.Product.Maximum">
            </div>
        </div>
        <div class="col-lg-4">
            <div class="mb-3">
                <label class="form-label">Categoría*:</label>
                <div style="display: flex">

                    <Select Items="Model.Categories" @bind-SelectedValue="@Model.Product.Category"
                            TextExpression="e=> e.Description" ValueExpression="e=>e" Clearable />

                    <Button BackgroundColor="TablerColor.Green" OnClick="AddCategory">
                        <Icon class="icon" Elements="@InternalIcons.Circle_plus" />
                    </Button>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-12">
        <div>
            <label class="form-label">Descripción*:</label>
            <textarea class="form-control" rows="10" @bind="Model.Product.Description"></textarea>
        </div>
    </div>


</div>


<div class="modal-footer">
    <a @onclick="Cancel" class="btn btn-link link-secondary" data-dismiss="modal">
        Cancelar
    </a>
    <a @onclick="Confirm" class="btn btn-primary ms-auto" data-dismiss="modal">
        <Icon class="icon" Elements="@DemoIcons.Plus" />
        Confirmar
    </a>
</div>

@inject EditProductViewModel Model
@inject IModalService ModalService

@using System.IO
@using Kit.Extensions
@using Kit.WPF.Extensions
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment env

@code {

    protected override async Task OnInitializedAsync()
    {
        await Model.RequestLoad(ProductId);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Model.Refreshed += Refreshed;
    }

    private void Refreshed(object sender, EventArgs e)
    {
        (sender as IRefresh).Refreshed -= Refreshed;
        StateHasChanged();
    }

    protected async Task ChangePicture()
    {


    }

    [Parameter] public int ProductId { get; set; }

    private async Task AddSupplier()
    {
        var component = new RenderComponent<ProveedorRegister>().Set(prove => prove.ProveedorId,-1);
        var result = await ModalService.ShowAsync("Registrar proveedor", component, new ModalOptions { Size = ModalSize.Large, BlurBackground = true });
        if (!result.Cancelled)
        {
            await Model.RefreshSuppliers();
            StateHasChanged();
        }
    }
    private async Task FindProduct()
    {
        var result = await ModalService.ShowAsync($"Busqueda de productos",
            new RenderComponent<ProductFinder>(),
            new ModalOptions { StatusColor = TablerColor.Info, BlurBackground = true, Size = ModalSize.Maximized });

        if (!result.Cancelled)
        {
            Model.Product = result.Data as Product;
            StateHasChanged();
        }
    }
    private async Task AddCategory()
    {
        var result = await ModalService.ShowAsync($"Alta de categoría",
            new RenderComponent<CategoryAdd>(),
            new ModalOptions { StatusColor = TablerColor.Info, BlurBackground = true });

        if (!result.Cancelled)
        {
            await Model.RefreshCategories();
            StateHasChanged();
            //ModalService.Close(ModalResult.Ok());
        }
    }

    private Task Error(string error)
    {
        return ModalService.ShowAsync($"Alerta",
               new RenderComponent<DialogTest>().Set(x => x.Line1, error),
               new ModalOptions { StatusColor = TablerColor.Danger, BlurBackground = true });
    }
    private async Task Confirm()
    {
        string message = "Dar de alta este artículo";
        if (Model.Product.Id > 0)
        {
            message = "¿Editar este artículo?";
        }
        var result = await ModalService.ShowAsync(Model.Product.Name,
            new RenderComponent<DialogTest>().Set(x => x.Line1, message),
            new ModalOptions { StatusColor = TablerColor.Info, BlurBackground = true });

        if (!result.Cancelled)
        {
            Model.Product.Description = Model.Product.Description?.Trim() ?? string.Empty;

            Model.Product.Code = Model.Product.Code?.Trim() ?? string.Empty;
            if (string.IsNullOrEmpty(Model.Product.Code))
            {
                await Error("El código de producto no puede estar vacio");
                return;
            }

            Model.Product.Name = Model.Product.Name?.Trim() ?? string.Empty;
            if (string.IsNullOrEmpty(Model.Product.Name))
            {
                await Error("El nombre no puede estar vacio");
                return;
            }


            if (Model.Product.Category is null)
            {
                await Error("La categoría no puede estar vacia");
                return;
            }

            Model.Product.Unit = Model.Product.Unit?.Trim() ?? string.Empty;
            if (string.IsNullOrEmpty(Model.Product.Unit))
            {
                await Error("La unidad no puede estar vacia");
                return;
            }
            if (Model.Product.Supplier is null)
            {
                await Error("El Proveedor no puede estar vacio");
                return;
            }

            if (Model.Product.Minimum > Model.Product.Maximum || Model.Product.Minimum == Model.Product.Maximum)
            {
                await Error("El minimo debe ser menor que el máximo");
                return;
            }

            Model.Product.Save();
            ModalService.Close(ModalResult.Ok());
        }
    }

    private void Cancel()
    {
        ModalService.Close(ModalResult.Cancel());
    }

    IReadOnlyList<IBrowserFile> selectedFiles;
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        OnSubmit();
    }
    private async void OnSubmit()
    {
        if (selectedFiles?.Any() ?? false)
        {
            var file = selectedFiles.First();
            Model.Product.Picture = await AppData.Compress(file); ;
        }
        this.StateHasChanged();
    }

}


