@page "/usuario"
@using Tabler.Docs.Components.Modals
@using Tabler.Docs.Interfaces
@using Tabler.Docs.Models
@using Tabler.Docs.ViewModels
@using Customer = Tabler.Docs.Models.Customer

@inject ClientesPageViewModel Model
@inject CustomerViewModel Mode


<!--<Table Item="Customer" Items="Model.Customers" PageSize="10"
       OnItemSelected="OnItemDelete">
    <HeaderTemplate>
        <strong>Clientes</strong>
    </HeaderTemplate>

    <ChildContent>
        <Column Item="Customer" Property="e=>e.Name" Title="Clientes" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Name" />
            </EditorTemplate>
        </Column>
        <Column Item="Customer" Property="e=>e.Note" Title="Notas" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Note" />
            </EditorTemplate>
        </Column>-->
        @*<Column Item="Customer" Property="e=>e.Id" Title="Editar" Sortable Searchable Groupable>
                <EditorTemplate>
                    <Button @onclick="()=>EditClient(context)" BackgroundColor="TablerColor.Green">
                        <Icon class="icon" Elements="@DemoIcons.Pencil" />
                    </Button>
                </EditorTemplate>
            </Column>*@
        @*<Column Item="Customer" Property="e=>e.OrderType" Title="Order type" Sortable Searchable Groupable>
                <EditorTemplate>
                    <Select Items="EnumHelper.GetList<OrderType>()" @bind-SelectedValue="@context.OrderType" TextExpression="e=> e.ToString()" ValueExpression="e=> e" Clearable />
                </EditorTemplate>
            </Column>*@
    <!--</ChildContent>

</Table>-->
<Button @onclick=@ShowModal BackgroundColor="TablerColor.Green">
    <Icon class="icon" Elements="@DemoIcons.Circle_plus" />
    Registrar
</Button>
@code {

    [Inject] IModalService ModalService { get; set; }
    [Inject] TabBlazor.Services.TablerService TablerService { get; set; }
    protected async Task ShowModal()
    {


        var component = new RenderComponent<UserRegister>();
        var result = await ModalService.ShowAsync("Registrar cliente", component, new ModalOptions { Size = ModalSize.Medium });

        if (!result.Cancelled)
        {
            await Model.Refresh();
            StateHasChanged();
        }


    }

    protected override async Task OnInitializedAsync()
    {
        await Model.Refresh();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Model.Refreshed += Refreshed;
    }

    private void Refreshed(object sender, EventArgs e)
    {
        (sender as IRefresh).Refreshed -= Refreshed;
        StateHasChanged();
    }

    //private async Task OnItemDelete(Customer customer)
    //{
    //    var component = new RenderComponent<CustomerRegistration>().Set(custom => custom.CustomerId, customer.Id);
    //    var result = await ModalService.ShowAsync("Registrar cliente", component, new ModalOptions { Size = ModalSize.Large });
    //    if (!result.Cancelled)
    //    {
    //        await Model.Refresh();
    //        StateHasChanged();
    //    }
    //}

    //private async Task OnItemEdit(Customer customer)
    //{
    //    var component = new RenderComponent<CustomerRegistration>().Set(custom => custom.CustomerId, customer.Id);
    //    var result = await ModalService.ShowAsync("Registrar cliente", component, new ModalOptions { Size = ModalSize.Large });
    //   // await TablerService.ShowAlert($"Edited order {customer.Id}");
    //}
}