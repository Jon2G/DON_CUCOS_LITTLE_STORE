
@page "/ventas"
@using CucoStore.Docs.Components.Modals
@using CucoStore.Docs.Interfaces
@using CucoStore.Docs.Models
@using CucoStore.Docs.ViewModels
@using Customer = CucoStore.Docs.Models.Customer
@inject SalesPageViewModel Model




@if (!AppData.Current.User.Permissions.Sales)
{
    <Forbbiden />
    return;
}

<style>
    .sticky {
        position: -webkit-sticky; /* Safari */
        position: sticky;
        top: 0;
    }
</style>



<div class="row">
    <dvi class="col-md-6 ">
        <Card class="sticky" style=" padding: 3px; z-index: 999;">
            <PagePretitle>
                Don cuco's
                <Icon class="align-text-top" Elements="@DemoIcons.Heart" TextColor="TablerColor.Red" Size="12" Filled />
                little store
            </PagePretitle>
            <div style="display: flex;">
                @if (Model.IsInCategory)
                {
                    <Button style="z-index: 999;" class="sticky" Text="Volver a categorias" @onclick="() => GoBack()" BackgroundColor="TablerColor.Info">
                        <div>
                            <Icon class="icon" Elements="@DemoIcons.Arrow_back" />
                            <span style="margin: 5px;">Volver a categorias</span>
                        </div>
                    </Button>
                }
                <div style="width: 30px;" />
                <h1>Productos</h1>
                <div style="width: 60px;" />
                <p style="margin: auto">Buscador:</p>
                <input style="width:100%" @bind="Search" />
            </div>
        </Card>

        <Row>
            @if (Model.IsInCategory)
            {
                @if (Model.IsLoading)
                {
                    <Dimmer ShowSpinner="true" Active="Model.IsLoading">
                        <p><em>Cargando...</em></p>
                    </Dimmer>
                }
                else
                {
                    <Card Size="CardSize.Small" class="sticky" style="z-index: 999; top: 65px;">
                        <CardBody class="d-flex align-items-center">
                            <span class="bg-blue text-white stamp me-3">
                                <Icon Elements="@DemoIcons.Building_warehouse" />
                            </span>
                            <div class="me-3 lh-sm">
                                <div class="strong">
                                    @Model.GroupLine.Category.Description
                                </div>
                                @*<div class="text-muted">12 waiting payments</div>*@
                            </div>
                        </CardBody>
                    </Card>
                    if (Model.GroupLine.IsLoading)
                    {
                        <Dimmer ShowSpinner="true" Active="Model.GroupLine.IsLoading">
                            <p><em>Cargando...</em></p>
                        </Dimmer>
                    }
                    else
                    {
                        <Row>
                            @foreach (Product product in Model.GroupLine.Products)
                            {
                                <RowCol Sm="4">
                                    <Card OnClick="() => ProductClick(product)">
                                        <div class="card" style="margin: 5px; cursor: pointer;">
                                            <img src="@product.Picture" alt="@product.Name" style="height: 200px;">
                                            <div class="container">
                                                <h4><b>@product.Name</b></h4>
                                                <div class="row">
                                                    <p>
                                                        @Model.GroupLine.Category.Description
                                                        @if (!product.HasStock)
                                                        {

                                                            <Icon class="icon" Elements="@DemoIcons.Alert_triangle" />

                                                        }
                                                        @if (product.HasDisscount)
                                                        {
                                                            <div class="col-md-4">
                                                                <label style="color:darkred">@string.Concat(product.Disccount,'%'," Off")</label>
                                                            </div>
                                                        }
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </Card>
                                </RowCol>
                            }
                        </Row>

                    }

                }
            }
            else
            {

                foreach (GroupLine line in Model.Lines)
                {
                    <RowCol Sm="4">
                        <Card OnClick="() => LineClick(line)">
                            <div class="card" style="margin: 5px; cursor: pointer;">
                                <img src="@line.Category.Picture" alt="@line.Category.Description" style="height: 200px;">
                                <div class="container" style=" padding: 0px; margin: auto; width: 100%; text-align: center; "><b style="text-align: center; font-size: 20px;">@line.Category.Description</b></div>
                            </div>
                        </Card>
                    </RowCol>
                }
            }
        </Row>
    </dvi>
    <dvi class="col-md-6">
        <Card class="sticky">
            <div>
                <div class="row" style="padding: 10px; margin: 5px;">
                    <div class="col-lg-6">
                        <div class="mb-3">
                            <label class="form-label">Cliente*:</label>
                            <div style="display: flex">

                                <Select Items="Model.Customers" @bind-SelectedValue="@Model.Sale.Customer"
                                        TextExpression="e => e?.Name" ValueExpression="e=>e" Clearable />

                                <Button BackgroundColor="TablerColor.Green" OnClick="CustomerSearch">
                                    <Icon class="icon" Elements="@InternalIcons.Search" />
                                </Button>
                                <Button BackgroundColor="TablerColor.Green" OnClick="AddCustomer">
                                    <Icon class="icon" Elements="@InternalIcons.Circle_plus" />
                                </Button>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="mb-3">
                            <label class="form-label">Vendendor*:</label>
                            <div class="mb-3" style="display: flex;">
                                <Card style="border: none;padding: 3px;">
                                    <p style="margin: auto;">@Model.Sale.User.Name</p>
                                </Card>
                                <Button BackgroundColor="TablerColor.Green" OnClick="ChangeUser">
                                    <Icon class="icon" Elements="@DemoIcons.Login" />
                                </Button>
                                @*<Button BackgroundColor="TablerColor.Info" OnClick="CorteZ">
                                    <label>Corte Z</label>
                                    <Icon class="icon" Elements="@DemoIcons.Ticket"/>
                                </Button>*@
                            </div>

                        </div>
                    </div>
                </div>

                <Table Item="SalePart" Items="Model.Sale.Parts" PageSize="Model.PageSize">
                    <HeaderTemplate>
                        <strong>Venta</strong>
                    </HeaderTemplate>

                    <ChildContent>
                        <Column Item="SalePart" Property="e => e.Product.Picture" Title="Imagen">
                            <Template>
                                <img src="@context.Product.Picture" style="height: 100px;" />
                            </Template>
                        </Column>
                        <Column Item="SalePart" Property="e => e.Product.Name" Title="Nombre" Sortable Searchable Groupable />

                        <Column Item="SalePart" Property="e => e.Product.Price" Title="Precio" Sortable Searchable Groupable>
                            <Template>
                                @if (context.Product.HasDisscount)
                                {
                                    <p>@context.Product.DisccountPrice.ToString("C2")</p>
                                    <b style="text-decoration: line-through;color:darkred">@context.Product.Price.ToString("C2")</b>
                                }
                                else
                                {
                                    <b>@context.Product.Price.ToString("C2")</b>
                                }
                            </Template>
                        </Column>
                        <Column Item="SalePart" Property="e => e.Quantity" Title="Qty." Sortable Searchable Groupable>
                            <Template>
                                <div style="display: flex;">


                                    <Button class="col-md-4" @onclick="() => Minus(context)" BackgroundColor="TablerColor.Orange">
                                        <Icon class="icon" Elements="@DemoIcons.Minus" />
                                    </Button>
                                    <Button class="col-md-4" @onclick="() => Plus(context)" BackgroundColor="TablerColor.Green">
                                        <Icon class="icon" Elements="@DemoIcons.Plus" />
                                    </Button>
                                    <input style="margin-left: 5px; width: 70px;" class="col-md-4" @bind="context.Quantity" />
                                </div>
                            </Template>
                        </Column>
                        <Column Item="SalePart" Property="e => e.Total" Title="Total" Sortable Searchable Groupable>
                            <Template>
                                @if (context.Product.HasDisscount)
                                {
                                    <p>@context.DisccountTotal.ToString("C2")</p>
                                    <b style="text-decoration: line-through;color:darkred">@context.Total.ToString("C2")</b>
                                }
                                else
                                {
                                    <b>@context.Total.ToString("C2")</b>
                                }

                            </Template>
                        </Column>
                    </ChildContent>
                </Table>
                <Card style="padding: 10px; text-align: end;">

                    <div style="display: block;">
                        <b style="font-size: 18px">Total:</b>
                        @if (Model.Sale.HasDisscount)
                        {
                            <b >@Model.Sale.DisccountTotal.ToString("C2")</b>
                            <b style="text-decoration: line-through;color:darkred">@Model.Sale.Total.ToString("C2")</b>
                        }
                        else
                        {
                            <b>@Model.Sale.Total.ToString("C2")</b>
                        }
                    </div>
                    <div>
                        <Button style="align-self: flex-end; margin: 3px;" class="col-md-4" @onclick="() => EndSale()" BackgroundColor="TablerColor.Green">
                            Cobrar
                            <Icon style="margin-left: 5px" class="icon" Elements="@DemoIcons.Shopping_cart" />
                        </Button>
                        <Button style="align-self: flex-end; margin: 3px;" class="col-md-4" @onclick="() => QuitSale()" BackgroundColor="TablerColor.Red">
                            Descartar
                            <Icon style="margin-left: 5px" class="icon" Elements="@DemoIcons.Trash_off" />
                        </Button>
                    </div>
                </Card>
            </div>
        </Card>
    </dvi>
</div>





@code {

    private string _Search;
    public string Search
    {
        get => _Search;
        set
        {
            if (_Search != value)
            {
                _Search = value;
                DoSearch();
            }
        }
    }

    public async void DoSearch()
    {
        await Refresh(Search);
        StateHasChanged();
    }

    public async Task Refresh(string Search = null)
    {
        try
        {
            if (Model.IsLoading)
            {
                return;
            }
            Model.IsLoading = true;
            Model.Lines.Clear();

            if (string.IsNullOrEmpty(_Search))
            {
                foreach (Category linea in await Category.GetAll())
                {
                    var gropup = new GroupLine(linea);
                    await gropup.Refresh();
                    Model.Lines.Add(gropup);
                }
            }
            else
            {
                foreach (Category linea in await Category.Search(_Search))
                {
                    var gropup = new GroupLine(linea);
                    await gropup.Refresh(_Search);
                    Model.Lines.Add(gropup);
                }
                Model.GroupLine = Model.Lines.Where(x => x.Products.Any()).FirstOrDefault();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            Model.IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }

    }

    [Inject] NavigationManager NavManager { get; set; }
    protected override void OnAfterRender(bool firstrender)
    {
        @if (CucoStore.Docs.Data.AppData.Current.User.Id <= 0)
        {
            NavManager.NavigateTo("login");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        this.Model.Customers.Clear();
        this.Model.Customers.AddRange(await Customer.GetAll());
        await Refresh();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }


    [Inject] IModalService ModalService { get; set; }

    protected async Task ShowModal()
    {
        await ShowModal(0);
    }
    protected async Task ShowModal(int ProductId)
    {
        string Tile = "Alta de productos";
        if (ProductId > 0)
        {
            Tile = "Edición de producto";
        }

        var component = new RenderComponent<ProductEdit>().Set(e => e.ProductId, ProductId);
        var result = await ModalService.ShowAsync(Tile, component, new ModalOptions { Size = ModalSize.Large });

        if (!result.Cancelled)
        {
            await Refresh();
            StateHasChanged();
        }
    }


    //private  void CorteZ()
    //{
    //    Reports.CorteZ();
    //}
    private async void ChangeUser()
    {
        var component = new RenderComponent<QuickLogin>();
        var result = await ModalService.ShowAsync("Cambio de usuario", component, new ModalOptions { Size = ModalSize.Small });
        if (!result.Cancelled)
        {
            Model.Sale.User = AppData.Current.User;
            await Refresh();
            StateHasChanged();
        }

    }

    private async void AddCustomer()
    {
        var component = new RenderComponent<CustomerRegistration>();
        var result = await ModalService.ShowAsync("Registrar cliente", component, new ModalOptions { Size = ModalSize.Large });
        if (!result.Cancelled)
        {
            Model.Customers.Clear();
            Model.Customers.AddRange(await Customer.GetAll());
            StateHasChanged();
        }
    }

    private async void CustomerSearch()
    {
        var component = new RenderComponent<CustomerFinder>();
        var result = await ModalService.ShowAsync("Buscar cliente", component, new ModalOptions { Size = ModalSize.Large });
        if (!result.Cancelled)
        {
            Model.Sale.Customer = result.Data as CucoStore.Docs.Models.Customer;
            await Refresh();
            StateHasChanged();
        }
    }

    private async void LineClick(GroupLine line)
    {
        Model.IsLoading = true;
        StateHasChanged();
        await Task.Delay(10);
        await Model.LoadLine(line);
        Model.GroupLine = line;
        StateHasChanged();
    }

    private async void GoBack()
    {
        Search = null;
        Model.GroupLine = new GroupLine(new Category());
        await Refresh();
        StateHasChanged();
    }
    private Task Error(string error)
    {
        return ModalService.ShowAsync($"Alerta",
            new RenderComponent<DialogTest>().Set(x => x.Line1, error),
            new ModalOptions { StatusColor = TablerColor.Danger, BlurBackground = true });
    }
    private async void ProductClick(Product product)
    {
        if (!product.HasStock)
        {
            await Error("Este producto no cuenta con existencia");
            return;
        }
        Model.Sale.Add(product);
    }

    private void Plus(SalePart salePart)
    {
        salePart.Quantity++;
    }

    private void Minus(SalePart salePart)
    {
        salePart.Quantity--;
        if (salePart.Quantity <= 0)
        {
            this.Model.Sale.Parts.Remove(salePart);
        }
    }

    public void QuitSale()
    {
        Model.Sale = new Sale();
    }
    public async void EndSale()
    {
        var component = new RenderComponent<PaymentPage>();
        var result = await ModalService.ShowAsync("Finalizar venta", component, new ModalOptions { Size = ModalSize.Large });
        if (!result.Cancelled)
        {
            Model.Sale = new Sale();
            await Refresh();
            StateHasChanged();
        }
    }

}

