@page "/clientes"
@using Tabler.Docs.Components.Modals
@using Tabler.Docs.Interfaces
@using Tabler.Docs.Models
@using Tabler.Docs.ViewModels
@using Customer = Tabler.Docs.Models.Customer

@inject CustomersPageViewModel Model


<Table Item="Customer" Items="Model.Customers" PageSize="10"
       OnItemSelected="OnItemEdit" OnItemDeleted="OnItemDelete">
    <HeaderTemplate>
        <strong>Clientes</strong>
    </HeaderTemplate>

    <ChildContent>
        <Column Item="Customer" Property="e=>e.Name" Title="Clientes" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Name" />
            </EditorTemplate>
        </Column>
        <Column Item="Customer" Property="e=>e.Note" Title="Notas" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Note" />
            </EditorTemplate>
        </Column>
        <Column Item="Customer" Property="e => e.Name" Title="Imagen">
            <Template>
                <img src="@context.Picture" style="height: 100px;" />
            </Template>
        </Column>
    </ChildContent>

</Table>
@if (!AppData.Current.User.Permissions.ReadOnly)
{
    <Button @onclick=@ShowModal BackgroundColor="TablerColor.Green">
        <Icon class="icon" Elements="@DemoIcons.Circle_plus" />
        Registrar
    </Button>
}
@code {

    [Inject] IModalService ModalService { get; set; }
    [Inject] TabBlazor.Services.TablerService TablerService { get; set; }
    [Inject] NavigationManager NavManager { get; set; }
    protected override void OnAfterRender(bool firstrender)
    {
        @if (Tabler.Docs.Data.AppData.Current.User.Id <= 0)
        {
            NavManager.NavigateTo("login");
        }
    }
    protected async Task ShowModal()
    {


        var component = new RenderComponent<CustomerRegistration>();
        var result = await ModalService.ShowAsync("Registrar cliente", component, new ModalOptions { Size = ModalSize.Small });

        if (!result.Cancelled)
        {
            await Model.Refresh();
            StateHasChanged();
        }


    }

    protected override async Task OnInitializedAsync()
    {
        await Model.Refresh();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Model.Refreshed += Refreshed;
    }

    private void Refreshed(object sender, EventArgs e)
    {
        (sender as IRefresh).Refreshed -= Refreshed;
        StateHasChanged();
    }


    private async Task OnItemEdit(Customer customer)
    {
        if (AppData.Current.User.Permissions.ReadOnly)
        {
            var result = await ModalService.ShowAsync(AppData.Current.User.Name,
            new RenderComponent<DialogTest>().Set(x => x.Line1, "No tienes permiso de editar"),
            new ModalOptions { StatusColor = TablerColor.Danger, BlurBackground = true });
        }
        else
        {
            var component = new RenderComponent<CustomerRegistration>().Set(custom => custom.CustomerId, customer.Id);
            var result = await ModalService.ShowAsync("Registrar cliente", component, new ModalOptions { Size = ModalSize.Large });
            if (!result.Cancelled)
            {
                await Model.Refresh();
                StateHasChanged();
            }
        }
    }

    private async Task OnItemDelete(Customer customer)
    {
        Customer custom = Customer.GetById(customer.Id);
        if (custom is null) { return; }
        var result = await ModalService.ShowAsync(custom.Name,
            new RenderComponent<DialogTest>().Set(x => x.Line1, "¿Eliminar este Cliente?")
                .Set(x => x.Line2, "Continuará mostrandose en reportes de ventas anteriores")
                .Set(x => x.Line3, "Esta acción no puede deshacerse"),
            new ModalOptions { StatusColor = TablerColor.Danger, BlurBackground = true });

        if (!result.Cancelled)
        {
            customer.Enabled = true;
            customer.Save();
            ModalService.Close(ModalResult.Ok());
            await Model.Refresh();
            StateHasChanged();
        }
    }
}
