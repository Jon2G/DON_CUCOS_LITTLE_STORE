@page "/entradassalidas"
@using Tabler.Docs.Components.Modals
@using Tabler.Docs.Interfaces
@using Tabler.Docs.Models
@using Tabler.Docs.ViewModels
@inject MovementsPageViewModel Model
@if (!AppData.Current.User.Permissions.Sales)
{
    <Forbbiden />
}
else
{

    @*<Table Item="User" Items="Model.Users" PageSize="10"
               OnItemSelected="OnItemEdit" OnItemDeleted="OnItemDelete">
            <HeaderTemplate>
                <strong>Usuarios</strong>
            </HeaderTemplate>

            <ChildContent>
                <Column Item="User" Property="e => e.Nickname" Title="NickName" Sortable Searchable Groupable>
                    <EditorTemplate>
                        <input type="text" class="form-control" @bind-value="@context.Nickname" />
                    </EditorTemplate>
                </Column>
                <Column Item="User" Property="e => e.Name" Title="Nombre" Sortable Searchable Groupable>
                    <EditorTemplate>
                        <input type="text" class="form-control" @bind-value="@context.Name" />
                    </EditorTemplate>
                </Column>
                <Column Item="User" Property="e => e.Permissions.StockOut" Title="Privilegio Salidas" Sortable Searchable Groupable>
                    <Template>
                        <Checkbox Label="Privilegio Salidas" @bind-Value="context.Permissions.StockOut" Disabled="true" Switch />
                    </Template>
                </Column>
                <Column Item="User" Property="e => e.Permissions.StockIn" Title="Privilegio Entradas" Sortable Searchable Groupable>
                    <Template>
                        <Checkbox Label="Privilegio Entradas" @bind-Value="context.Permissions.StockIn" Disabled="true" Switch />
                    </Template>
                </Column>
                <Column Item="User" Property="e => e.Permissions.UserManager" Title="Derechos sobre usuarios" Sortable Searchable Groupable>
                    <Template>
                        <Checkbox Label="Derechos sobre usuarios" @bind-Value="context.Permissions.UserManager" Disabled="true" Switch />
                    </Template>
                </Column>
                <Column Item="User" Property="e => e.Permissions.ReadReports" Title="Privilegio Reporte" Sortable Searchable Groupable>
                    <Template>
                        <Checkbox Label="Privilegio Reporte" @bind-Value="context.Permissions.ReadReports" Disabled="true" Switch />
                    </Template>
                </Column>
                <Column Item="User" Property="e => e.Permissions.ReadOnly" Title="Solo lectura" Sortable Searchable Groupable>
                    <Template>
                        <Checkbox Label="Solo lectura" @bind-Value="context.Permissions.ReadOnly" Disabled="true" Switch />
                    </Template>
                </Column>
                <Column Item="User" Property="e => e.Permissions.Sales" Title="Privilegio Ventas" Sortable Searchable Groupable>
                    <Template>
                        <Checkbox Label="Privilegio Ventas" @bind-Value="context.Permissions.Sales" Disabled="true" Switch />
                    </Template>
                </Column>
                <Column Item="User" Property="e => e.Name" Title="Imagen">
                    <Template>
                        <img src="@context.Picture" style="height: 100px;" />
                    </Template>
                </Column>
            </ChildContent>

        </Table>*@
    <Button @onclick=@ShowModal BackgroundColor="TablerColor.Green">
        <Icon class="icon" Elements="@DemoIcons.Circle_plus" />
        Registrar
    </Button>
}
@code
{
    [Inject] IModalService ModalService { get; set; }
    [Inject] TabBlazor.Services.TablerService TablerService { get; set; }
    [Inject] NavigationManager NavManager { get; set; }
    protected override void OnAfterRender(bool firstrender)
    {
@if (Tabler.Docs.Data.AppData.Current.User.Id <= 0)
{
    NavManager.NavigateTo("login");
}}
        protected async Task ShowModal()
        {


            var component = new RenderComponent<EntradasSalidas>();
            var result = await ModalService.ShowAsync("Registrar Entrada", component, new ModalOptions { Size = ModalSize.XLarge });

            if (!result.Cancelled)
            {
                await Model.Refresh();
                StateHasChanged();
            }


        }

        protected override async Task OnInitializedAsync()
        {
            await Model.Refresh();
        }

        protected override void OnInitialized()
        {
            base.OnInitialized();
            Model.Refreshed += Refreshed;
        }

        private void Refreshed(object sender, EventArgs e)
        {
            (sender as IRefresh).Refreshed -= Refreshed;
            StateHasChanged();
        }
}