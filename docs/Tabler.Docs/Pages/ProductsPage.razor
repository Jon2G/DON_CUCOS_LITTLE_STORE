@page "/products"
@using Tabler.Docs.Components.Modals
@using Tabler.Docs.Interfaces
@using Tabler.Docs.Models
@using Tabler.Docs.ViewModels


<style>
    .sticky {
        position: -webkit-sticky; /* Safari */
        position: sticky;
        top: 0;
        z-index: 999;
    }
</style>

<Card class="sticky" style=" padding: 3px;">
    <PagePretitle>
        Don cuco's
        <Icon class="align-text-top" Elements="@DemoIcons.Heart" TextColor="TablerColor.Red" Size="12" Filled />
        little store
    </PagePretitle>
    <div style="display: flex;">

        <h1>Productos</h1>
        <Button style="margin-left: 10px;" Text="Nuevo producto" @onclick="() => ShowModal()" BackgroundColor="TablerColor.Info">
            <div>
                <span style="margin: 5px;">Nuevo producto</span>
                <Icon class="icon" Elements="@DemoIcons.Circle_plus" />
            </div>
        </Button>
        <div style="width: 60px;" />
        <p style="margin: auto">Buscador de productos:</p>
        <input style="width:100%" @bind="Search" />
    </div>
</Card>




@if (IsLoading)
{
    <Dimmer ShowSpinner="true" Active="IsLoading">
        <p><em>Cargando...</em></p>
    </Dimmer>
}
else
{
    lock (Lines)
    {
        foreach (GroupLine line in Lines)
        {
            if (line.Products.Any())
            {
                <Card Size="CardSize.Small" class="sticky" style="top: 60px;">
                    <CardBody class="d-flex align-items-center">
                        <span class="bg-blue text-white stamp me-3">
                            <Icon Elements="@DemoIcons.Building_warehouse" />
                        </span>
                        <div class="me-3 lh-sm">
                            <div class="strong">
                                @line.Category.Description
                            </div>
                            @*<div class="text-muted">12 waiting payments</div>*@
                        </div>
                    </CardBody>
                </Card>
            }

            if (line.IsLoading)
            {
                <Dimmer ShowSpinner="true" Active="line.IsLoading">
                    <p><em>Cargando...</em></p>
                </Dimmer>
            }
            else
            {
                <Row>
                    @foreach (Product product in line.Products)
                    {
                        <RowCol Sm="2">
                            <Card>
                                <div class="card" style="margin: 5px;">
                                    <img src="@product.Picture" alt="@product.Name" style="height: 200px;">
                                    <div class="container">
                                        <h4><b>@product.Name</b></h4>
                                        <p>@line.Category.Description</p>
                                        @if (!AppData.Current.User.Permissions.ReadOnly)
                                        {

                                            <div class="row">
                                                <div class="col-md-4">
                                                    <Button @onclick="() => ShowModal(product.Id)" BackgroundColor="TablerColor.Green">
                                                        <Icon class="icon" Elements="@DemoIcons.Pencil" />
                                                    </Button>
                                                </div>
                                                <div class="col-md-4">
                                                    <Button @onclick="() => Delete(product.Id)" BackgroundColor="TablerColor.Danger">
                                                        <Icon class="icon" Elements="@DemoIcons.Trash" />
                                                    </Button>
                                                </div>
                                                @if (!product.HasStock)
                                                {
                                                    <div class="col-md-4">
                                                        <Icon class="icon" Elements="@DemoIcons.Alert_triangle" />
                                                    </div>
                                                }
                                            </div>




                                        }

                                    </div>
                                </div>
                            </Card>
                        </RowCol>
                    }
                </Row>

            }
        }
    }

}



@code {

    private string _Search;
    public string Search
    {
        get => _Search;
        set
        {
            if (_Search != value)
            {
                _Search = value;
                Task.Run(Refresh);
            }
        }
    }
    public bool IsLoading { get; set; }
    public List<GroupLine> Lines { get; set; } = new List<GroupLine>();


    public async Task Refresh()
    {
        try
        {
            if (IsLoading)
            {
                return;
            }
            IsLoading = true;

            this.Lines.Clear();
            if (string.IsNullOrEmpty(_Search))
            {
                foreach (Category linea in await Category.GetAll())
                {
                    var gropup = new GroupLine(linea);
                    await gropup.Refresh();
                    this.Lines.Add(gropup);
                }
            }
            else
            {
                foreach (Category linea in await Category.Search(_Search))
                {
                    var gropup = new GroupLine(linea);
                    await gropup.Refresh(_Search);
                    this.Lines.Add(gropup);
                }
            }


        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }

    }


    [Inject] NavigationManager NavManager { get; set; }
    protected override void OnAfterRender(bool firstrender)
    {
        @if (Tabler.Docs.Data.AppData.Current.User.Id <= 0)
        {
            NavManager.NavigateTo("login");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }


    [Inject] IModalService ModalService { get; set; }

    protected async Task ShowModal()
    {
        await ShowModal(0);
    }
    protected async Task ShowModal(int ProductId)
    {
        string Tile = "Alta de productos";
        if (ProductId > 0)
        {
            Tile = "Edición de producto";
        }

        var component = new RenderComponent<ProductEdit>().Set(e => e.ProductId, ProductId);
        var result = await ModalService.ShowAsync(Tile, component, new ModalOptions { Size = ModalSize.Large });

        if (!result.Cancelled)
        {
            await this.Refresh();
            StateHasChanged();
        }
    }

    private async void Delete(int productId)
    {
        Product product = await Product.GetById(productId);
        if (product is null) { return; }
        var result = await ModalService.ShowAsync(product.Name,
            new RenderComponent<DialogTest>().Set(x => x.Line1, "¿Eliminar este producto?")
                .Set(x => x.Line2, "Continuará mostrandose en reportes de ventas anteriores")
                .Set(x => x.Line3, "Esta acción no puede deshacerse"),
            new ModalOptions { StatusColor = TablerColor.Danger, BlurBackground = true });

        if (!result.Cancelled)
        {
            product.Disabled = true;
            product.Save();
            ModalService.Close(ModalResult.Ok());
            await Refresh();
            StateHasChanged();
        }
    }

}

