@page "/"
@page "/products"
@using Tabler.Docs.Components.Modals
@using Tabler.Docs.Interfaces
@using Tabler.Docs.Models
@using Tabler.Docs.ViewModels
@inject ProductsPageViewModel Model

<PagePretitle>
    Don cuco's
    <Icon class="align-text-top" Elements="@DemoIcons.Heart" TextColor="TablerColor.Red" Size="12" Filled />
    little store
</PagePretitle>
<PageTitle>Productos</PageTitle>


@if (Model.IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    foreach (GroupLine line in Model.Lines)
    {
        <Card Size="CardSize.Small">
            <CardBody class="d-flex align-items-center">
                <span class="bg-blue text-white stamp me-3">
                    <Icon Elements="@DemoIcons.Building_warehouse" />
                </span>
                <div class="me-3 lh-sm">
                    <div class="strong">
                        @line.Name
                    </div>
                    @*<div class="text-muted">12 waiting payments</div>*@
                </div>
            </CardBody>
        </Card>

        if (!line.Products.Any())
        {
            line.Refreshed += Refreshed;
            line.Refresh();
        }
        if (line.IsLoading)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <Row>
                @foreach (Product product in line.Products)
                {
                    <RowCol Sm="2">
                        <Card>
                            <div class="card" style="margin: 5px;">
                                <img src="https://picsum.photos/200/300" alt="@product.Name" style="height: 200px;">
                                <div class="container">
                                    <h4><b>@product.Name</b></h4>
                                    <p>@line.Name</p>
                                    
                                    <Row style="margin: 5px;">
                                        <RowCol Sm="6">
                                            <Button @onclick="()=>ShowModal(product.Id)" BackgroundColor="TablerColor.Green">
                                                <Icon class="icon" Elements="@DemoIcons.Pencil" />
                                            </Button>
                                        </RowCol>
                                        <RowCol Sm="6">
                                            <Button @onclick="()=>ShowModal(product.Id)" BackgroundColor="TablerColor.Danger">
                                                <Icon class="icon" Elements="@DemoIcons.Trash" />
                                            </Button>
                                        </RowCol>
                                    </Row>
                                </div>
                            </div>
                        </Card>
                    </RowCol>
                }
            </Row>
        }
    }
}


<div>@message</div>


@code {

    protected override async Task OnInitializedAsync()
    {
        await Model.Refresh();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Model.Refreshed += Refreshed;
    }

    private void Refreshed(object sender, EventArgs e)
    {
        (sender as IRefresh).Refreshed -= Refreshed;
        StateHasChanged();
    }


    [Inject] IModalService ModalService { get; set; }
    private string message;
    protected async Task ShowModal(string ProductId)
    {
        message = string.Empty;

        var component = new RenderComponent<ProductEdit>().Set(e => e.ProductId, ProductId);
        var result = await ModalService.ShowAsync("Edición de producto", component, new ModalOptions { Size = ModalSize.Large });

        if (result.Cancelled)
        {
            message = "Modal was cancelled!";
        }
        else
        {
            message = "Modal as ok!";
        }

    }

}



<Row class="mt-1 row-deck row-cards">
    <RowCol Sm="12" Md="6" Lg="3">
        <Tabler.Docs.Components.Snippets.Statistics.SmallSales />
    </RowCol>
    <RowCol Sm="12" Md="6" Lg="3">
        <Tabler.Docs.Components.Snippets.Statistics.SmallOrders />
    </RowCol>
    <RowCol Sm="12" Md="6" Lg="3">
        <Tabler.Docs.Components.Snippets.Statistics.SmallLikes />
    </RowCol>
    <RowCol Sm="12" Md="6" Lg="3">
        <Tabler.Docs.Components.Snippets.Statistics.SmallMembers />
    </RowCol>

    <RowCol Sm="12" Md="6" Lg="3">
        <Tabler.Docs.Components.Snippets.Statistics.StatisticsMedium />
    </RowCol>
    <RowCol Sm="12" Md="6" Lg="3">
        <Tabler.Docs.Components.Snippets.Statistics.StatisticsChart />
    </RowCol>
    <RowCol Sm="12" Md="6" Lg="3">
        <Tabler.Docs.Components.Snippets.Statistics.StatisticsLineChart />
    </RowCol>
    <RowCol Sm="12" Md="6" Lg="3">
        <Tabler.Docs.Components.Snippets.Statistics.StatisticsMedium />
    </RowCol>

    <RowCol Sm="12" Lg="6">
        <Tabler.Docs.Components.Snippets.Tables.CustomerList />
    </RowCol>

    <RowCol Sm="12" Lg="6">
        <Tabler.Docs.Components.Snippets.Tables.Orders />
    </RowCol>


</Row>

