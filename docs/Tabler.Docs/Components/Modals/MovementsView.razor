@using Microsoft.AspNetCore.Components
@using CucoStore.Docs.Components.Icons
@using CucoStore.Docs.Interfaces
@using CucoStore.Docs.ViewModels
@using CucoStore.Docs.Models
@inject MovementViewModel Model

<Table Item="MovementPart" Items="Model.Movement.Parts" PageSize="10"
       OnItemDeleted="OnItemDelete">
    <HeaderTemplate>
        <strong>Movimientos</strong>
    </HeaderTemplate>

    <ChildContent>
        <Column Item="MovementPart" Property="e => e.Product.Code" Title="Codigo " Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Product.Code" />
            </EditorTemplate>
        </Column>
        <Column Item="MovementPart" Property="e => e.Product.Name" Title="Nombre" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Product.Name" />
            </EditorTemplate>
        </Column>
        <Column Item="MovementPart" Property="e => e.Quantity" Title="Cantidad" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Quantity" />
            </EditorTemplate>
        </Column>
        <Column Item="MovementPart" Property="e => e.InitiallyStock" Title="Actual" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.InitiallyStock" />
            </EditorTemplate>
        </Column>
        <Column Item="MovementPart" Property="e => e.NewStock" Title="Posterior" Sortable Searchable Groupable>
            <EditorTemplate>
                <label class="form-label">@context.NewStock</label>
            </EditorTemplate>
        </Column>
    </ChildContent>
</Table>
<div class="row">
    <div class="col-md-4">
        <label class="form-label"> Articulo*:</label>
        <div class="mb-3" style="display: flex;">
            <Select Items="Model.Products" @bind-SelectedValue="@Model.SelectedProduct"
                    TextExpression="e => e.Name" ValueExpression="e=>e" Clearable />

            <Button BackgroundColor="TablerColor.Green" OnClick="FindProduct">
                <Icon class="icon" Elements="@InternalIcons.Search" />
            </Button>
        </div>
    </div>
    <div class="col-md-4">
        <div class="mb-3">
            <label class="form-label">Cantidad*:</label>
            <input type="text" class="form-control" @bind="Model.SelectedQuantity">

        </div>
    </div>
    <div class="col-md-4">
        <label class="form-label"> Unidad*:</label>

        <div class="row">
            <div class="col-md-6" style="margin: auto">
                <label class="form-label">@Model.SelectedProduct.Unit</label>
            </div>
            <div class="col-md-6">
                <Button BackgroundColor="TablerColor.Green" OnClick="Seleccionar">
                    Seleccionar
                    <Icon class="icon" Elements="@InternalIcons.Circle_plus" />
                </Button>
            </div>
        </div>
    </div>

    <div class="col-md-5">
        <label class="form-label"> Observaciones*:</label>
        <textarea type="text" class="form-control" @bind="Model.Movement.Observations"></textarea>
    </div>
    <div class="col-md-3">
        <label class="form-label"> Concepto*:</label>
        <div style="margin: auto">
            <Select Items="Model.Concepts" @bind-SelectedValue="@Model.SelectedConcept"
                    TextExpression="e => e.ToString()" ValueExpression="e=>e" Clearable />
        </div>
    </div>
    @*<div class="col-md-2" style="margin: auto">
        <Checkbox Label="Imprimir movimiento" Changed="StateHasChanged" Switch />
    </div>*@
    <div class="col-md-4" style="margin: auto">
        <Button BackgroundColor="TablerColor.Green" OnClick="Finalizar">
            Confirmar movimiento
            <Icon class="icon" Elements="@InternalIcons.Arrow_right" />
        </Button>
    </div>

</div>
@inject IModalService ModalService
@code

{
    [Inject] TabBlazor.Services.TablerService TablerService { get; set; }

    [Parameter]
    public char Type
    {
        get => Model.Type;
        set { Model.Type = value;
            DoRefresh(value);
        }
    }

    private async void DoRefresh(char Type)
    {
        await Model.Refresh(Type);
    }
    protected override Task OnParametersSetAsync()
    {
        if (Type == '\0')
        {
            return  base.OnParametersSetAsync();
        }
        return Model.Refresh(Type);
    }

    protected override Task OnInitializedAsync()
    {
        if (Type == '\0')
        {
            return base.OnInitializedAsync();
        }
        return Model.Refresh(Type);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Model.Refreshed += Refreshed;
    }

    private void Refreshed(object sender, EventArgs e)
    {
        (sender as IRefresh).Refreshed -= Refreshed;
        StateHasChanged();
    }
    [Parameter] public int MovementId { get; set; }

    private Task Error(string error)
    {
        return ModalService.ShowAsync($"Alerta",
            new RenderComponent<DialogTest>().Set(x => x.Line1, error),
            new ModalOptions { StatusColor = TablerColor.Danger, BlurBackground = true });
    }
    private async void Seleccionar()
    {
        if (Model.SelectedProduct.Id <= 0)
        {
            await Error("Seleccione un producto");
            return;
        }

        Model.Agregar();
    }
    private async Task FindProduct()
    {
        var result = await ModalService.ShowAsync($"Busqueda de productos",
            new RenderComponent<ProductFinder>(),
            new ModalOptions { StatusColor = TablerColor.Info, BlurBackground = true, Size = ModalSize.Maximized });

        if (!result.Cancelled)
        {
            Model.SelectedProduct = result.Data as Product;
            StateHasChanged();
        }
    }
    private async Task Finalizar()
    {
        if (Model.SelectedConcept.Id <= 0)
        {
            await Error("Seleccione un concepto para este movimiento");
            return;
        }
        if (Model.Movement.Parts.Count <= 0)
        {
            await Error("No puede confirmar un movimiento vacio");
            return;
        }

        var result = await ModalService.ShowAsync("Movimiento",
        new RenderComponent<DialogTest>().Set(x => x.Line1, "¿Confirmar este movimiento?"),
        new ModalOptions { StatusColor = TablerColor.Danger, BlurBackground = false });

        if (!result.Cancelled)
        {
            Model.AgregarIdConcept();
            await Model.Movement.Save();
            ModalService.Close(ModalResult.Ok());
        }
    }
    private async Task OnItemDelete(MovementPart order)
    {
        //await TablerService.ShowAlert($"Order deleted {order.Product.Id}");
    }
}