@using Microsoft.AspNetCore.Components
@using Tabler.Docs.Components.Icons
@using Tabler.Docs.Interfaces
@using Tabler.Docs.Models
@using Tabler.Docs.ViewModels
@using System.IO
@using Kit.Extensions
@using Kit.WPF.Extensions

<div class="row">
    <div class="col-lg-12">
        <div class="mb-3">
            <div class="row">

                <div class="example-centered">
                    <div class="mb-3">
                        <label class="form-label">Icono de categoría*:</label>
                        <div style="margin: 5px; display: inline-grid; width: 100%">
                            <div style="margin: 5px; display: block; margin-left: auto; margin-right: auto; width: auto;">
                                <img src="@Model.Category.Picture" style="vertical-align: middle; width: 150px; height: 150px;">
                            </div>
                            <InputFile OnChange="OnInputFileChange" multiple />
                        </div>

                    </div>
                </div>

                <div class="col-lg-12">
                    <div class="mb-3">
                        <label class="form-label">Descripción*:</label>
                        <input type="text" class="form-control" @bind="Model.Category.Description">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal-footer">
    <a @onclick="Cancel" class="btn btn-link link-secondary" data-dismiss="modal">
        Cancelar
    </a>
    <a @onclick="Confirm" class="btn btn-primary ms-auto" data-dismiss="modal">
        <Icon class="icon" Elements="@DemoIcons.Circle_plus" />
        Confirmar
    </a>
</div>

@inject CategoryAddViewModel Model;
@inject IModalService ModalService
@code {
    [Parameter] public int CategoryId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await Model.RequestLoad(CategoryId);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Model.Refreshed += Refreshed;
    }

    private void Refreshed(object sender, EventArgs e)
    {
        (sender as IRefresh).Refreshed -= Refreshed;
        if (Model.Category is null)
        {
            Model.Category = new Category();
        }
        StateHasChanged();
    }


    private async Task Confirm()
    {
        string message = "¿Dar de alta esta categoría";
        if (Model.Category.Id > 0)
        {
            message = "¿Actualizar esta categoría?";
        }
        var result = await ModalService.ShowAsync(Model.Category.Description,
            new RenderComponent<DialogTest>().Set(x => x.Line1, message),
            new ModalOptions { StatusColor = TablerColor.Danger, BlurBackground = true });

        if (!result.Cancelled)
        {
            if ((Model.Category.Id <= 0) && Category.GetByName(Model.Category.Description).Id > 0)
            {
                await ModalService.ShowAsync($"¡Alerta!",
                    new RenderComponent<DialogTest>().Set(x => x.Line1, "Ya existe una categoría con esta descripción"),
                    new ModalOptions { StatusColor = TablerColor.Danger, BlurBackground = true });
                return;
            }
            Model.Category.Save();
            Model.Category = new Category();
            ModalService.Close(ModalResult.Ok());
        }
    }
    IReadOnlyList<IBrowserFile> selectedFiles;
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        OnSubmit();
    }
    private async void OnSubmit()
    {
        if (selectedFiles?.Any() ?? false)
        {
            var file = selectedFiles.First();
            Model.Category.Picture = await AppData.Compress(file); ;
        }
        this.StateHasChanged();
    }

    private void Cancel()
    {
        ModalService.Close(ModalResult.Cancel());
    }
}
