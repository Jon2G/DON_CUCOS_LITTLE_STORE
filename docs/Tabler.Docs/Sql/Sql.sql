USE master;
EXEC msdb.dbo.sp_delete_database_backuphistory @database_name = N'DON_CUCO'
GO
use [DON_CUCO];
GO
use [master];
GO
USE [master]
GO
ALTER DATABASE [DON_CUCO] SET  SINGLE_USER WITH ROLLBACK IMMEDIATE
GO
USE [master]
GO
/****** Object:  Database [DON_CUCO]    Script Date: 6/1/2021 8:31:01 PM ******/
DROP DATABASE [DON_CUCO] 
GO
CREATE DATABASE DON_CUCO
GO
USE DON_CUCO
GO
CREATE TABLE CATEGORIES
(
  ID INT PRIMARY KEY IDENTITY(1,1),
  DESCRIPTION VARCHAR(100) NOT NULL UNIQUE,
  PICTURE VARCHAR(MAX)
);
CREATE TABLE SUPPLIERS(
    ID INT PRIMARY KEY IDENTITY(1,1),
	PICTURE VARCHAR(MAX),
    NAME VARCHAR(100) NOT NULL,
    CELLPHONE VARCHAR(100),
    NOTES VARCHAR(MAX),
	ENABLED BIT NOT NULL DEFAULT 0

)
CREATE TABLE PRODUCTS(
    ID INT PRIMARY KEY IDENTITY(1,1),
    CODE VARCHAR(100) UNIQUE NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION VARCHAR(MAX),
    CATEGORY_ID INT FOREIGN KEY REFERENCES CATEGORIES NOT NULL,
    SUPPLIER_ID INT FOREIGN KEY REFERENCES SUPPLIERS NOT NULL,
    UNIT VARCHAR(100) NOT NULL,
    IMAGE VARCHAR(MAX),
    STOCK REAL NOT NULL DEFAULT 0,
    MINIMUM REAL NOT NULL DEFAULT 0,
    MAXIMUM REAL NOT NULL DEFAULT 0,
    PRICE REAL NOT NULL DEFAULT 0,
    DISABLED BIT NOT NULL DEFAULT 0
);
CREATE TABLE PERMISSIONS
(
    ID INT PRIMARY KEY IDENTITY (1,1),
    STOCK_OUT BIT DEFAULT 0,
    STOCK_IN BIT DEFAULT 0,
    REPORTS_READ BIT DEFAULT 0,
    USER_MANAGER BIT DEFAULT 0,
	READ_ONLY BIT DEFAULT 0
);
CREATE TABLE KEYS(
    ID INT PRIMARY KEY IDENTITY(1,1),
    PASSWORD_KEY VARCHAR(37) DEFAULT NEWID()
);
CREATE TABLE USERS(
    ID INT PRIMARY KEY IDENTITY(1,1),
    PERMISSIONS_ID INT FOREIGN KEY REFERENCES PERMISSIONS NOT NULL,
    KEYS_ID INT FOREIGN KEY REFERENCES KEYS NOT NULL,
    NICKNAME VARCHAR(100) NOT NULL UNIQUE,
    NAME VARCHAR(100) NOT NULL,
    PASSWORD VARBINARY(MAX) NOT NULL,
    PICTURE VARCHAR(MAX) DEFAULT NULL,
    ENABLED BIT NOT NULL DEFAULT 0
);
CREATE TABLE MOVEMENT_CONCEPT
(
    ID INT PRIMARY KEY IDENTITY(1,1),
    TAG VARCHAR(10) NOT NULL,
    DESCRIPTION VARCHAR(100)
);
CREATE TABLE MOVEMENTS(
    ID INT PRIMARY KEY IDENTITY(1,1),
    PRODUCT_ID INT FOREIGN KEY REFERENCES PRODUCTS NOT NULL,
    USER_ID INT FOREIGN KEY REFERENCES USERS NOT NULL,
    MOVEMENT_CONCEPT_ID INT FOREIGN KEY REFERENCES MOVEMENT_CONCEPT NOT NULL,
    TYPE VARCHAR(1) NOT NULL,
    QUANTITY REAL NOT NULL DEFAULT 0,
    INITIALLY_STOCK REAL NOT NULL,
    NEW_EXISTENCE REAL NOT NULL,
    DATE_M DATE NOT NULL DEFAULT GETDATE()
);

CREATE TABLE CUSTOMERS(
    ID INT PRIMARY KEY IDENTITY(1,1),
    NAME VARCHAR(100) NOT NULL,
    NOTES VARCHAR(MAX),
	PICTURE VARCHAR(MAX),
	ENABLED BIT NOT NULL DEFAULT 0
);

CREATE TABLE SALES(
    ID INT PRIMARY KEY IDENTITY(1,1),
    CUSTOMER_ID INT FOREIGN KEY REFERENCES CUSTOMERS NOT NULL,
    USER_ID INT FOREIGN KEY REFERENCES USERS NOT NULL,
    DATE DATE,
    TOTAL REAL
);

CREATE TABLE SALE_PARTS(
	ID INT PRIMARY KEY IDENTITY(1,1),
	SALE_ID INT FOREIGN KEY REFERENCES SALES NOT NULL,
	PRODUCT_ID INT FOREIGN KEY REFERENCES PRODUCTS NOT NULL,
	QUANTITY REAL,
	PRICE REAL,
	TOTAL REAL
);


GO
CREATE PROCEDURE SP_LOGIN (@NICKNAME VARCHAR(100), @PASSWORD NVARCHAR(50))
AS
BEGIN
		DECLARE @USER_ID INT;
		SELECT @USER_ID=ID FROM USERS WHERE NICKNAME=@NICKNAME
		IF(@USER_ID>0)
			BEGIN
			  DECLARE @PASSWORD_KEY VARCHAR(37);
			  DECLARE @REAL_PASSWORD VARCHAR(50);
			  DECLARE @KEY_ID INT;
			  SELECT @KEY_ID=KEYS_ID FROM USERS WHERE ID=@USER_ID

			  SELECT @PASSWORD_KEY=PASSWORD_KEY FROM KEYS WHERE ID=@KEY_ID
			  
			  SELECT @REAL_PASSWORD=CONVERT(NVARCHAR(MAX), DECRYPTBYPASSPHRASE(@PASSWORD_KEY, PASSWORD)) FROM USERS WHERE ID=@USER_ID
			  IF (@REAL_PASSWORD=@PASSWORD)
			  BEGIN
				SELECT 1 AS 'LOGIN_STATUS';
				RETURN;
			  END
			END
			SELECT 0 AS 'LOGIN_STATUS';
	END;
GO
CREATE PROCEDURE SP_REGISTER(@NICKNAME VARCHAR(100), @PASSWORD NVARCHAR(50),@NAME VARCHAR(100),@PICTURE VARCHAR(MAX),@ENABLED BIT,@ID INT)
AS
BEGIN
	IF(@ID<=0)
	BEGIN
	DECLARE @PERMISSIONS_ID INT;
	DECLARE @KEY_ID INT;
	DECLARE @KEY VARCHAR(MAX);
	DECLARE @ENCRYPTED_PASSWORD VARBINARY(MAX);

	INSERT INTO PERMISSIONS DEFAULT VALUES
	SELECT @PERMISSIONS_ID=SCOPE_IDENTITY();

	INSERT INTO KEYS DEFAULT VALUES
	SELECT @KEY_ID=SCOPE_IDENTITY();
	SELECT @KEY =PASSWORD_KEY FROM KEYS WHERE ID=@KEY_ID

	SELECT @ENCRYPTED_PASSWORD = ENCRYPTBYPASSPHRASE(@KEY, @PASSWORD);
		
	INSERT INTO USERS(PERMISSIONS_ID,KEYS_ID,NICKNAME,NAME,PASSWORD,PICTURE,ENABLED)
	VALUES(@PERMISSIONS_ID,@KEY_ID,@NICKNAME,@NAME,@ENCRYPTED_PASSWORD,@PICTURE,@ENABLED)
	END ELSE
	BEGIN

	SELECT @KEY_ID=KEYS_ID FROM USERS WHERE ID=@ID
	SELECT @KEY =PASSWORD_KEY FROM KEYS WHERE ID=@KEY_ID
	SELECT @ENCRYPTED_PASSWORD = ENCRYPTBYPASSPHRASE(@KEY, @PASSWORD);
	UPDATE USERS SET NICKNAME=@NICKNAME,NAME=@NAME,PASSWORD=@ENCRYPTED_PASSWORD,PICTURE=@PICTURE,ENABLED=@ENABLED
	WHERE ID=@ID

	END
END;
GO

-------PRODUCTS--------
CREATE PROCEDURE SP_GET_PRODUCTS
AS
BEGIN
	SELECT * FROM PRODUCTS WHERE DISABLED=0 ORDER BY NAME
END;
GO
CREATE PROCEDURE SP_FIND_PRODUCT(@CODE VARCHAR(100))
AS
BEGIN
	SELECT * FROM PRODUCTS WHERE DISABLED=0 AND CODE=@CODE ORDER BY NAME
END;
GO
CREATE PROCEDURE SP_GET_PRODUCT_BY_ID (@ID INT)
AS
BEGIN
	SELECT *FROM PRODUCTS WHERE ID=@ID
END
GO
CREATE PROCEDURE SP_SEARCH_PRODUCT(@SEARCH VARCHAR(200))
AS
BEGIN
	SELECT * FROM PRODUCTS WHERE DISABLED=0 AND CODE LIKE '%'+@SEARCH+'%' OR NAME LIKE '%'+@SEARCH+'%' ORDER BY NAME
END;
GO
CREATE PROCEDURE SP_GET_PRODUCTS_BY_CATEGORY(@CATEGORY_ID INT)
AS
BEGIN
SELECT * FROM PRODUCTS WHERE DISABLED=0 AND CATEGORY_ID=@CATEGORY_ID ORDER BY NAME
END;
GO
CREATE PROCEDURE SP_GET_CATEGORIES
AS
BEGIN
	SELECT *FROM CATEGORIES order by DESCRIPTION
END;
GO
CREATE PROCEDURE SP_GET_CATEGORY_BY_NAME (@NAME VARCHAR(100))
AS
BEGIN
	SELECT *FROM CATEGORIES WHERE DESCRIPTION=@NAME
END;
GO
CREATE PROCEDURE SP_GET_CATEGORY_BY_ID (@ID INT)
AS
BEGIN
	SELECT *FROM CATEGORIES WHERE ID=@ID
END;
GO
CREATE PROCEDURE SP_GET_SUPPLIERS
AS
BEGIN
	SELECT *FROM SUPPLIERS
END;
GO
CREATE PROCEDURE SP_ABC_PRODUCT (@ID INT,@CODE VARCHAR(100),@NAME VARCHAR(100),@DESCRIPTION VARCHAR(MAX),
@CATEGORY_ID INT,@SUPPLIER_ID INT,@UNIT VARCHAR(100),@IMAGE VARCHAR(MAX),@STOCK REAL,@MINIMUM REAL,@MAXIMUM REAL,
@PRICE REAL,@DISABLED BIT)
AS
BEGIN
	IF(@ID<=0)
	BEGIN
		INSERT INTO PRODUCTS (CODE,NAME,DESCRIPTION,CATEGORY_ID,SUPPLIER_ID,UNIT,IMAGE,STOCK,MINIMUM,MAXIMUM,PRICE,DISABLED)
		VALUES(@CODE,@NAME,@DESCRIPTION,@CATEGORY_ID,@SUPPLIER_ID,@UNIT,@IMAGE,@STOCK,@MINIMUM,@MAXIMUM,@PRICE,@DISABLED)
	END ELSE
	BEGIN
		UPDATE PRODUCTS SET CODE=@CODE,NAME=@NAME,DESCRIPTION=@DESCRIPTION,CATEGORY_ID=@CATEGORY_ID,
		SUPPLIER_ID=@SUPPLIER_ID,UNIT=@UNIT,IMAGE=@IMAGE,STOCK=@STOCK,MINIMUM=@MINIMUM,MAXIMUM=@MAXIMUM,PRICE=@PRICE,DISABLED=@DISABLED
		WHERE ID=@ID
	END
END;
GO
CREATE PROCEDURE SP_ABC_CATEGORY (@ID INT,@DESCRIPTION VARCHAR(100),@PICTURE VARCHAR(MAX))
AS
BEGIN
	IF(@ID<=0)
	BEGIN
		INSERT INTO CATEGORIES(DESCRIPTION,PICTURE) VALUES(@DESCRIPTION,@PICTURE) 
	END ELSE
	BEGIN
		UPDATE CATEGORIES SET DESCRIPTION=@DESCRIPTION WHERE ID=@ID
	END
END;
GO
------ALERTS-------
CREATE VIEW VIEW_OVERSTOCKED
AS
SELECT * FROM PRODUCTS WHERE STOCK>=MAXIMUM;
GO
CREATE VIEW VIEW_UNDERSTOCKED
AS
SELECT * FROM PRODUCTS WHERE STOCK<=MINIMUM;
GO
CREATE VIEW VIEW_ALL_ALERTS
AS
SELECT * FROM PRODUCTS WHERE STOCK >= MAXIMUM OR STOCK <= MINIMUM;
GO
-----MOVEMENTS-----
CREATE PROCEDURE SP_GET_MOVEMENT(@ID INT)
AS
BEGIN
SELECT * FROM MOVEMENTS WHERE ID =@ID;
END;
GO
CREATE PROCEDURE SP_ADDMOVEMENT
(
@PRODUCT_ID INT,
@USER_ID INT,
@MOVEMENT_CONCEPT_ID INT,
@TYPE VARCHAR(1),
@QUANTITY REAL)
AS
BEGIN
	DECLARE @INITIALLY_STOCK REAL
	DECLARE @NEW_EXISTENCE REAL
	SELECT @INITIALLY_STOCK = STOCK FROM PRODUCTS WHERE ID=@PRODUCT_ID
	IF(@TYPE='S')
	BEGIN
		SELECT @QUANTITY=@QUANTITY*-1
	END
	SELECT @NEW_EXISTENCE=@INITIALLY_STOCK+@QUANTITY

	INSERT INTO MOVEMENTS (PRODUCT_ID,USER_ID,MOVEMENT_CONCEPT_ID,TYPE,QUANTITY,INITIALLY_STOCK,NEW_EXISTENCE)
	VALUES(@PRODUCT_ID,@USER_ID,@MOVEMENT_CONCEPT_ID,@TYPE,@QUANTITY,@INITIALLY_STOCK,@NEW_EXISTENCE);
END;
-----CUSTOMER-----
GO
CREATE PROCEDURE SP_ABC_CUSTOMER (@ID INT, @NAME VARCHAR(100),@NOTES VARCHAR(MAX),@PICTURE VARCHAR(MAX),@ENABLED BIT)
AS
BEGIN
	IF(@ID<=0)
	BEGIN
		INSERT INTO CUSTOMERS(NAME,NOTES,PICTURE,ENABLED ) VALUES(@NAME,@NOTES,@PICTURE,@ENABLED ) 
	END ELSE
	BEGIN
		UPDATE CUSTOMERS SET NAME= @NAME,NOTES=@NOTES,PICTURE=@PICTURE,ENABLED=@ENABLED  WHERE ID=@ID
	END
END;
GO
CREATE PROCEDURE SP_SEARCHCUSTOMER(@ID INT)
AS
BEGIN
SELECT * FROM CUSTOMERS WHERE ID= @ID;
END;

GO
CREATE VIEW VIEW_GETALL
AS
SELECT * FROM CUSTOMERS WHERE ENABLED= 0;


-----Supplier----
GO
CREATE PROCEDURE SP_ABC_SUPPLIERS(@ID INT,@NAME VARCHAR(100),@CELLPHONE VARCHAR(100),@NOTES VARCHAR(MAX),@PICTURE VARCHAR(MAX),@ENABLED BIT)
AS
BEGIN
	IF(@ID<=0)
	BEGIN
		INSERT INTO SUPPLIERS(NAME,CELLPHONE,NOTES,PICTURE,ENABLED) VALUES (@NAME,@CELLPHONE,@NOTES,@PICTURE,@ENABLED)
	END ELSE
	BEGIN
		UPDATE SUPPLIERS SET NAME=@NAME,CELLPHONE=@CELLPHONE,NOTES=@NOTES,PICTURE=@PICTURE,ENABLED=@ENABLED WHERE ID=@ID;
	END
END;
GO
CREATE VIEW VIEW_GETALLSUPPLIERS
AS
SELECT * FROM SUPPLIERS WHERE ENABLED=0;
GO
CREATE PROCEDURE SP_GETIDSUPPLIERS(@ID INT)
AS
SELECT * FROM SUPPLIERS WHERE ID=@ID;


----PERMISOS---
GO
CREATE PROCEDURE SP_ABC_PERMISSIONS
( @ID INT,@STOCK_OUT BIT,@STOCK_IN BIT ,@REPORTS_READ BIT,@USER_MANAGER BIT,@READ_ONLY BIT)
AS
BEGIN
IF(@ID<=0)
BEGIN
	INSERT INTO PERMISSIONS (STOCK_OUT,STOCK_IN,REPORTS_READ,USER_MANAGER,READ_ONLY)VALUES(@STOCK_OUT,@STOCK_IN ,@REPORTS_READ ,@USER_MANAGER,@READ_ONLY)
END ELSE
BEGIN
	UPDATE PERMISSIONS SET STOCK_OUT=@STOCK_OUT,STOCK_IN=@STOCK_IN,REPORTS_READ=@REPORTS_READ,USER_MANAGER=@USER_MANAGER,READ_ONLY=@READ_ONLY
	WHERE ID=@ID
END
END;
GO
CREATE PROCEDURE GET_PERMISSIONS_BY_ID  (@ID INT)
AS
BEGIN
	SELECT *fROM PERMISSIONS WHERE ID=@ID
END;
GO
CREATE PROCEDURE GET_USER_BY_NICKNAME  (@NICKNAME VARCHAR(100))
AS
BEGIN

 DECLARE @USER_ID INT;
 SELECT @USER_ID=ID FROM USERS WHERE NICKNAME=@NICKNAME
 DECLARE @PASSWORD_KEY VARCHAR(37);
 DECLARE @REAL_PASSWORD VARCHAR(50);
 DECLARE @KEY_ID INT;
 SELECT @KEY_ID=KEYS_ID FROM USERS WHERE ID=@USER_ID
 SELECT @PASSWORD_KEY=PASSWORD_KEY FROM KEYS WHERE ID=@KEY_ID
 SELECT @REAL_PASSWORD=CONVERT(NVARCHAR(MAX), DECRYPTBYPASSPHRASE(@PASSWORD_KEY, PASSWORD)) FROM USERS WHERE ID=@USER_ID
 SELECT ID,PERMISSIONS_ID,KEYS_ID,NICKNAME,NAME,@REAL_PASSWORD,PICTURE,ENABLED 
 FROM USERS WHERE ID=@USER_ID
END;
GO
CREATE PROCEDURE GET_USER_BY_ID (@ID INT)
AS
BEGIN
 DECLARE @PASSWORD_KEY VARCHAR(37);
 DECLARE @REAL_PASSWORD VARCHAR(50);
 DECLARE @KEY_ID INT;
 SELECT @KEY_ID=KEYS_ID FROM USERS WHERE ID=@ID
 SELECT @PASSWORD_KEY=PASSWORD_KEY FROM KEYS WHERE ID=@KEY_ID
 SELECT @REAL_PASSWORD=CONVERT(NVARCHAR(MAX), DECRYPTBYPASSPHRASE(@PASSWORD_KEY, PASSWORD)) FROM USERS WHERE ID=@ID
 SELECT ID,PERMISSIONS_ID,KEYS_ID,NICKNAME,NAME,@REAL_PASSWORD,PICTURE,ENABLED 
 FROM USERS WHERE ID=@ID
END;
GO
GO
CREATE VIEW VIEW_GETALLUSERS
AS
SELECT * FROM USERS	WHERE ENABLED=0;
